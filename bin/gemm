#!/usr/bin/env ruby

require "open3"

def run(command)
  out_err, status = Open3.capture2e(command)
  return out_err if status.success?

  $stderr.puts
  $stderr.puts(out_err || "Could not execute #{command}")
  exit(1)
end

def choose(question, choices)
  puts
  choices.each_with_index do |choice, i|
    puts "#{i + 1}. #{choice}"
  end
  print "#{question} [1-#{choices.length}]? "
  index = [$stdin.gets.to_i, 1].max
  choices[[index, choices.length].min - 1]
end

def gemfile_groups
  IO.read("Gemfile").scan(/^group\s*\(?(.*)\)?\s+do\s*$/).map(&:first)
end

def version_specs(version)
  specs = [version]
  parts = version.split(".")
  parts.length.downto(2).each do |limit|
    specs << "~> #{parts[0...limit].join('.')}"
  end
  specs.reverse
end

ARGV.each do |gem|

  if IO.read("Gemfile") =~ /^gem "#{gem}"/
    puts "#{gem} is already in the Gemfile!"
    exit 1
  end

  print "Looking for #{gem}..."
  version = Gem.latest_version_for(gem).to_s
  raise "Could not find #{gem}" if version.empty?

  puts "\rLooking for #{gem}... Found it! (#{version})"
  group = gemfile_groups.any? ? choose("Where do you want it", ["<root>"] + gemfile_groups) : "<root>"
  spec = choose("Version specification", ["<none>"] + version_specs(version))

  insert = %(gem "#{gem}")
  insert << %(, "#{spec}") unless spec == "<none>"
  insert << "\n"
  insert = "  #{insert}" unless group == "<root>"

  puts
  ok = []
  ok << "group #{group} do" unless group == "<root>"
  ok << insert.chomp
  ok << "end" unless group == "<root>"
  puts ok.join("\n")
  print "Does this look okay? [Yn]? "
  exit unless $stdin.gets =~ /^($|y)/i

  in_group = nil
  lines = (IO.readlines("Gemfile") + [""]).each_cons(2).each_with_object([]) do |(curr, succ), out|
    out << curr
    in_group = "<root>" if !in_group && succ =~ /^#?\s*(gem\s|group)/
    in_group = $1 if curr =~ /^group\s*\(?(.*)\)?\s+do\s*$/
    match = succ =~ /^\s*gem\s/ && insert && insert < succ
    bottom = out.length > 1 && succ.strip.empty? || (in_group != "<root>" && succ =~ /^end/)

    next unless in_group == group && insert && (match || bottom)

    out << insert
    insert = nil
  end
  IO.write("Gemfile", lines.join)

  puts
  print "Updating Gemfile..."

  run("bundle install")

  puts "\rUpdating Gemfile... DONE"

end
